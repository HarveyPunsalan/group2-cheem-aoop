/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.motorph.employeemanagement.view.admin;

import com.motorph.database.connection.DatabaseService;
import com.motorph.employeemanagement.model.Employee;
import com.motorph.employeemanagement.service.EmployeeRetrievalService;
import com.motorph.employeemanagement.service.EmployeeDeletionService;
import com.motorph.usermanagement.model.*;
import com.motorph.database.execution.SQLExecutor;
import com.motorph.employeemanagement.service.EmployeeCreationService;
import com.motorph.employeemanagement.service.EmployeeUpdateService;
import java.sql.Connection;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;

/**
 * Frame for Admin users to view and manage employee information.
 * Allows retrieval of active employees and populates a JTable with their details.
 */
public class EmployeeInformation extends javax.swing.JFrame {

    private final Admin admin; // The currently logged-in admin user
    private final Connection connection; // Database connection used for operations
    private final EmployeeRetrievalService retrievalService; // Service to fetch employee data
    private final EmployeeDeletionService deletionService; // Service to delete employee records
    
    public EmployeeInformation() {
        initComponents(); // Initialize Swing GUI components
        this.admin = null;
        this.connection = DatabaseService.connectToMotorPH();

        // Initialize services with a shared SQLExecutor
        this.retrievalService = new EmployeeRetrievalService(new SQLExecutor((connection)));
        this.deletionService = new EmployeeDeletionService(connection);

        // Load active employees into the table upon opening the frame
        refreshEmployeeTable();
    }
    
    /**
     * Constructs the EmployeeInformation frame.
     *
     * @param admin the current Admin user
     * @param connection the database connection to be used for services
     */
    public EmployeeInformation(Admin admin) {
        initComponents(); // Initialize Swing GUI components
        this.admin = admin;
        this.connection = DatabaseService.connectToMotorPH();

        admin.addLogoutListener(this); // Register logout listener to handle session events

        // Initialize services with a shared SQLExecutor
        this.retrievalService = new EmployeeRetrievalService(new SQLExecutor((java.sql.Connection) connection));
        this.deletionService = new EmployeeDeletionService((java.sql.Connection) connection);

        // Load active employees into the table upon opening the frame
        refreshEmployeeTable();
    }

     /**
     * Retrieves the list of active employees from the database and updates the JTable.
     */
    private void refreshEmployeeTable() {
        try {
            List<Employee> employees = retrievalService.getActiveEmployees(); // Fetch the list of active employees from the service
            jTable1EmployeeList.setModel(mapToTableModel(employees)); // Convert the list into a table model and update the JTable
            
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading employees: " + e.getMessage()); // Show error dialog if retrieval fails
        }
    }

    /**
     * Converts a list of Employee objects into a DefaultTableModel suitable for JTable display.
     *
     * @param employees List of active employees to display
     * @return a non-editable table model containing employee data
     */
    private DefaultTableModel mapToTableModel(List<Employee> employees) {
        String[] columns = {"ID", "First Name", "Last Name", "Birthday", "Phone", "Email"};
        Object[][] data = new Object[employees.size()][columns.length];

        // Populate the table data array with employee info
        for (int i = 0; i < employees.size(); i++) {
            Employee emp = employees.get(i);
            data[i][0] = emp.getEmployeeId();
            data[i][1] = emp.getFirstName();
            data[i][2] = emp.getLastName();
            data[i][3] = emp.getBirthday();
            data[i][4] = emp.getPhoneNumber();
            data[i][5] = emp.getEmail();
        }

        // Return a table model that disallows editing any cell
        return new DefaultTableModel(data, columns) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1EmployeeInformation = new javax.swing.JButton();
        jButton3EmployeeRequest = new javax.swing.JButton();
        jButton4Payroll = new javax.swing.JButton();
        jButton6LogOut = new javax.swing.JButton();
        jButton3SelfServicePortal = new javax.swing.JButton();
        jButton4Attendance = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1EmployeeList = new javax.swing.JTable();
        jButton1AddNewRecord = new javax.swing.JButton();
        jButton1ViewEmployeeDetails = new javax.swing.JButton();
        jButton2DeleteEmployeeRecord = new javax.swing.JButton();
        jButton1ViewAttendance = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        jButton1EmployeeInformation.setBackground(new java.awt.Color(0, 102, 153));
        jButton1EmployeeInformation.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1EmployeeInformation.setForeground(new java.awt.Color(255, 255, 255));
        jButton1EmployeeInformation.setText("Employee Information");
        jButton1EmployeeInformation.setBorder(null);

        jButton3EmployeeRequest.setBackground(new java.awt.Color(0, 102, 153));
        jButton3EmployeeRequest.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3EmployeeRequest.setForeground(new java.awt.Color(255, 255, 255));
        jButton3EmployeeRequest.setText("Employee Request");
        jButton3EmployeeRequest.setBorder(null);
        jButton3EmployeeRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3EmployeeRequestActionPerformed(evt);
            }
        });

        jButton4Payroll.setBackground(new java.awt.Color(0, 102, 153));
        jButton4Payroll.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton4Payroll.setForeground(new java.awt.Color(255, 255, 255));
        jButton4Payroll.setText("Payroll");
        jButton4Payroll.setBorder(null);
        jButton4Payroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4PayrollActionPerformed(evt);
            }
        });

        jButton6LogOut.setBackground(new java.awt.Color(0, 102, 153));
        jButton6LogOut.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jButton6LogOut.setForeground(new java.awt.Color(255, 255, 255));
        jButton6LogOut.setText("Log Out");
        jButton6LogOut.setBorder(null);
        jButton6LogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6LogOutActionPerformed(evt);
            }
        });

        jButton3SelfServicePortal.setBackground(new java.awt.Color(0, 102, 153));
        jButton3SelfServicePortal.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3SelfServicePortal.setForeground(new java.awt.Color(255, 255, 255));
        jButton3SelfServicePortal.setText("Self Service Portal");
        jButton3SelfServicePortal.setBorder(null);
        jButton3SelfServicePortal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3SelfServicePortalActionPerformed(evt);
            }
        });

        jButton4Attendance.setBackground(new java.awt.Color(0, 102, 153));
        jButton4Attendance.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton4Attendance.setForeground(new java.awt.Color(255, 255, 255));
        jButton4Attendance.setText("Attendance");
        jButton4Attendance.setBorder(null);
        jButton4Attendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4AttendanceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1EmployeeInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3EmployeeRequest, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(jButton4Payroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(jButton6LogOut, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(jButton3SelfServicePortal, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(jButton4Attendance, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(jButton3SelfServicePortal)
                .addGap(30, 30, 30)
                .addComponent(jButton3EmployeeRequest)
                .addGap(30, 30, 30)
                .addComponent(jButton1EmployeeInformation)
                .addGap(30, 30, 30)
                .addComponent(jButton4Payroll)
                .addGap(30, 30, 30)
                .addComponent(jButton4Attendance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6LogOut)
                .addContainerGap())
        );

        jTable1EmployeeList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "First Name", "Last Name", "Birthday", "Phone Number", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1EmployeeList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1EmployeeList.setShowGrid(true);
        jTable1EmployeeList.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1EmployeeList);
        jTable1EmployeeList.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable1EmployeeList.getColumnModel().getColumnCount() > 0) {
            jTable1EmployeeList.getColumnModel().getColumn(0).setResizable(false);
            jTable1EmployeeList.getColumnModel().getColumn(1).setResizable(false);
            jTable1EmployeeList.getColumnModel().getColumn(2).setResizable(false);
            jTable1EmployeeList.getColumnModel().getColumn(3).setResizable(false);
            jTable1EmployeeList.getColumnModel().getColumn(4).setResizable(false);
            jTable1EmployeeList.getColumnModel().getColumn(5).setResizable(false);
        }

        jButton1AddNewRecord.setText("Add New Record");
        jButton1AddNewRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1AddNewRecordActionPerformed(evt);
            }
        });

        jButton1ViewEmployeeDetails.setText("View Employee Details");
        jButton1ViewEmployeeDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ViewEmployeeDetailsActionPerformed(evt);
            }
        });

        jButton2DeleteEmployeeRecord.setText("Delete Employee Record");
        jButton2DeleteEmployeeRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2DeleteEmployeeRecordActionPerformed(evt);
            }
        });

        jButton1ViewAttendance.setText("View Attendance");
        jButton1ViewAttendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ViewAttendanceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 878, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1AddNewRecord)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1ViewEmployeeDetails)
                        .addGap(27, 27, 27)
                        .addComponent(jButton1ViewAttendance))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2DeleteEmployeeRecord)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1AddNewRecord)
                            .addComponent(jButton1ViewEmployeeDetails)
                            .addComponent(jButton1ViewAttendance))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2DeleteEmployeeRecord)
                        .addContainerGap())
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1AddNewRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1AddNewRecordActionPerformed
        // Instantiate the details frame in "add new employee" mode
        ViewEmployeeDetails addFrame = new ViewEmployeeDetails((Admin) admin);
        addFrame.setVisible(true); // Show the new frame

        this.setVisible(false); // Hide the current frame
    }//GEN-LAST:event_jButton1AddNewRecordActionPerformed
    
    private void jButton1ViewEmployeeDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ViewEmployeeDetailsActionPerformed
        // Check if a row is selected; abort if none is selected
        if (!isSelectRecord()) {
            return;
        }
        
        try {
        // Get the index of the selected row in the JTable
        int rowIndex = jTable1EmployeeList.getSelectedRow();
        
        // Retrieve the employee ID from the selected row (column 0)
        String employeeID = jTable1EmployeeList.getValueAt(rowIndex, 0).toString();

        // Open the ViewEmployeeDetails frame in "View Mode" (fields are non-editable)
//        ViewEmployeeDetails detailsPage = new ViewEmployeeDetails((Admin) admin, Integer.parseInt(employeeID));
//        ViewEmployeeDetails detailsPage = new ViewEmployeeDetails(Integer.parseInt(employeeID));
//        detailsPage.setVisible(true);
//        Access.accessViewEmployeeDetails(admin, Integer.parseInt(employeeID));
        Access.accessViewEmployeeDetails(Integer.parseInt(employeeID));
        // Close the current frame
        this.dispose();

    }catch (Exception e) { // Catch-all for unexpected issues
        JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage(),
            "Error", JOptionPane.ERROR_MESSAGE);
    }
        // Display a message if there's a problem with the database query
        
    }//GEN-LAST:event_jButton1ViewEmployeeDetailsActionPerformed

    private void jButton6LogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6LogOutActionPerformed
        admin.logout(this);
    }//GEN-LAST:event_jButton6LogOutActionPerformed

    private void jButton2DeleteEmployeeRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2DeleteEmployeeRecordActionPerformed
         if (!isSelectRecord()) { // Check if a record is selected in the JTable
            return; // If no selection, exit the method (prevent further execution)
        }

        // Show a confirmation dialog to prevent accidental deletion
        int result = JOptionPane.showConfirmDialog(
                this,
                "Are you sure to delete the Employee Record?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        // If user cancels (selects "No"), abort deletion
        if (result != JOptionPane.YES_OPTION) return;
        
        // Get the index of the selected row
        int rowIndex = jTable1EmployeeList.getSelectedRow();
        
        // Extract the employee ID from the selected row (first column)
        int employeeId = Integer.parseInt(jTable1EmployeeList.getValueAt(rowIndex, 0).toString());

        try {
            deletionService.deleteEmployee(employeeId); // Attempt to delete the employee from the database
            refreshEmployeeTable(); // Refresh the JTable to reflect the deletion
            JOptionPane.showMessageDialog(this, "Successfully Deleted"); // Notify the user of successful deletion
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Failed to delete employee: " + e.getMessage()); // Handle any SQL/database errors during deletion
        }
    }

    /**
    * Utility method to check if a row is selected in the employee JTable.
    *
    * @return true if a row is selected, false otherwise
    */
    private boolean isSelectRecord() {
        return jTable1EmployeeList.getSelectedRow() >= 0;
    }//GEN-LAST:event_jButton2DeleteEmployeeRecordActionPerformed

    private void jButton1ViewAttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ViewAttendanceActionPerformed
        // Ensure a record is selected before proceeding
        if (!isSelectRecord()) {
            return;
        }
        
        int rowIndex = jTable1EmployeeList.getSelectedRow(); // Get selected row index

        // Extract all employee details from the table
        String employeeId = jTable1EmployeeList.getValueAt(rowIndex, 0).toString();
        
        EmployeeRetrievalService retrievalService = new EmployeeRetrievalService(new SQLExecutor(connection));

        // Create an Employee object with all details
        Employee selectedEmployee = retrievalService.getEmployeeById(Integer.parseInt(employeeId));
        
//        Access.accessDTR(this.admin, selectedEmployee);
        Access.accessDTR(this.admin, selectedEmployee);
        this.setVisible(false); // Hide the current frame
    }//GEN-LAST:event_jButton1ViewAttendanceActionPerformed

    private void jButton3SelfServicePortalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3SelfServicePortalActionPerformed
        Access.accessProfilePage(this.admin);
        this.setVisible(false);
    }//GEN-LAST:event_jButton3SelfServicePortalActionPerformed

    private void jButton4PayrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4PayrollActionPerformed
        Access.accessPayrollList(this.admin);
        this.setVisible(false);
    }//GEN-LAST:event_jButton4PayrollActionPerformed

    private void jButton4AttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4AttendanceActionPerformed
        Access.accessAttendanceBiweekly((Admin) this.admin);
        this.setVisible(false);
    }//GEN-LAST:event_jButton4AttendanceActionPerformed

    private void jButton3EmployeeRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3EmployeeRequestActionPerformed
//        Access.accessEmployeeRequests(this.admin);
//        this.setVisible(false);
    }//GEN-LAST:event_jButton3EmployeeRequestActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeInformation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1AddNewRecord;
    private javax.swing.JButton jButton1EmployeeInformation;
    private javax.swing.JButton jButton1ViewAttendance;
    private javax.swing.JButton jButton1ViewEmployeeDetails;
    private javax.swing.JButton jButton2DeleteEmployeeRecord;
    private javax.swing.JButton jButton3EmployeeRequest;
    private javax.swing.JButton jButton3SelfServicePortal;
    private javax.swing.JButton jButton4Attendance;
    private javax.swing.JButton jButton4Payroll;
    private javax.swing.JButton jButton6LogOut;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1EmployeeList;
    // End of variables declaration//GEN-END:variables

}    

