/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.motorph.usermanagement.view;

import com.motorph.usermanagement.model.Admin;
import com.motorph.usermanagement.model.NonAdmin;
import com.motorph.usermanagement.service.UserService;
import com.motorph.usermanagement.service.UserServiceImpl;
import com.motorph.usermanagement.model.User;
import com.motorph.usermanagement.exception.InvalidCredentialsException;
import com.motorph.usermanagement.exception.DataAccessException;

import javax.swing.JOptionPane;
import java.util.logging.Logger;
import java.util.logging.Level;
/**
 *
 * @author Harvey
 */

public class LoginPage extends javax.swing.JFrame {

    private static final Logger logger = Logger.getLogger(LoginPage.class.getName());
    private final UserService userService;
    
    // Role constants for better maintainability
    private static final int SYSTEM_ADMIN_ROLE_ID = 0;
    private static final int ADMIN_ROLE_ID = 1;
    private static final int REGULAR_USER_ROLE_ID = 2;

    public LoginPage() {
        initComponents();
        setupInitialState();
        this.userService = new UserServiceImpl();
    }
    /**
     * Initialize component states
     */
    private void setupInitialState() {
        jButton2ForgotPassword.setVisible(false);
        jLabelIncorrectCredentials.setVisible(false);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1Username = new javax.swing.JLabel();
        jTextField1Username = new javax.swing.JTextField();
        jLabel3Password = new javax.swing.JLabel();
        jButton1LogIn = new javax.swing.JButton();
        jButton2ForgotPassword = new javax.swing.JButton();
        jLabelIncorrectCredentials = new javax.swing.JLabel();
        jPasswordFieldPassword = new javax.swing.JPasswordField();
        jLabelLogo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        jLabel1Username.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1Username.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1Username.setText("Username:");

        jTextField1Username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1UsernameActionPerformed(evt);
            }
        });

        jLabel3Password.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3Password.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3Password.setText("Password:");

        jButton1LogIn.setBackground(new java.awt.Color(204, 204, 204));
        jButton1LogIn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton1LogIn.setText("Log In");
        jButton1LogIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1LogInActionPerformed(evt);
            }
        });

        jButton2ForgotPassword.setBackground(new java.awt.Color(0, 102, 153));
        jButton2ForgotPassword.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jButton2ForgotPassword.setForeground(new java.awt.Color(255, 255, 255));
        jButton2ForgotPassword.setText("Forgot Password?");
        jButton2ForgotPassword.setBorder(null);

        jLabelIncorrectCredentials.setForeground(new java.awt.Color(255, 102, 102));
        jLabelIncorrectCredentials.setText("Incorrect Username or Password");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2ForgotPassword)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1Username, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3Password, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabelIncorrectCredentials))
                                    .addComponent(jTextField1Username, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPasswordFieldPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(jButton1LogIn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1Username)
                    .addComponent(jTextField1Username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3Password)
                    .addComponent(jPasswordFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelIncorrectCredentials)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2ForgotPassword)
                .addGap(30, 30, 30)
                .addComponent(jButton1LogIn)
                .addContainerGap(98, Short.MAX_VALUE))
        );

        jLabelLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/MotorPH Logo.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("MotorPH Payroll App");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelLogo)
                    .addComponent(jLabel1))
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jLabelLogo)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addContainerGap(97, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1LogInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1LogInActionPerformed
       hideErrorMessage();
        
        String username = getUsername();
        String password = getPassword();
        
        // System Admin bypass (temporary - temporary for system admin only remove after setting up proper users
        if (isSystemAdminBypass(username, password)) {
            handleSystemAdminBypass();
            return;
        }
        
        // Validate input
        if (!validateInput(username, password)) {
            return;
        }
        
        // Authenticate user
        authenticateUser(username, password);
    }
    /**
     * Check for system admin bypass credentials
     */
    private boolean isSystemAdminBypass(String username, String password) {
        return "systemadmin".equals(username) && "systemtest123".equals(password);
    } 
    /**
     * Handle SystemAdmin bypass login
     */
    private void handleSystemAdminBypass() {
        logger.info("Temporary SystemAdmin bypass activated");
        clearPassword();
        
        int option = JOptionPane.showConfirmDialog(this, 
            "Temporary SystemAdmin Access Granted!\n\nDo you want to proceed as SystemAdmin?", 
            "SystemAdmin Access", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.INFORMATION_MESSAGE);
        
        if (option == JOptionPane.YES_OPTION) {
            openSystemAdminDashboard();
        }
    }
    /**
     * Validate user input
     */
    private boolean validateInput(String username, String password) {
        if (username.isEmpty()) {
            showWarning("Please enter your username.", jTextField1Username);
            return false;
        }
        
        if (password.isEmpty()) {
            showWarning("Please enter your password.", jPasswordFieldPassword);
            return false;
        }
        
        return true;
    }
    /**
     * Authenticate user and handle login
     */
    private void authenticateUser(String username, String password) {
        try {
            User authenticatedUser = userService.authenticate(username, password);
            
            if (authenticatedUser != null) {
                handleSuccessfulLogin(authenticatedUser);
            } else {
                handleFailedLogin("Authentication failed. Please try again.", username);
            }
            
        } catch (InvalidCredentialsException e) {
            handleFailedLogin("Invalid username or password.", username);
        } catch (DataAccessException e) {
            handleDatabaseError(e);
        } catch (Exception e) {
            handleUnexpectedError(e);
        }
    } 
    /**
     * Handle successful login
     */
    private void handleSuccessfulLogin(User user) {
        logger.info(() -> "User authenticated successfully: " + user.getUsername());
        clearPassword();
        
        int option = JOptionPane.showConfirmDialog(this, 
            "Login Successful!\nWelcome, " + user.getUsername() + 
            "\n\nDo you want to proceed to the dashboard?", 
            "Login Success", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.INFORMATION_MESSAGE);
        
        if (option == JOptionPane.YES_OPTION) {
            try {
                openUserDashboard(user);
                this.dispose();
            } catch (Exception dashboardError) {
                handleDashboardError(dashboardError, user.getUsername());
            }
        } else {
            JOptionPane.showMessageDialog(this, 
                "You are successfully logged in. Click OK to stay on this page.", 
                "Logged In", 
                JOptionPane.INFORMATION_MESSAGE);
        }
    } 
    /**
     * Handle failed login
     */
    private void handleFailedLogin(String message, String username) {
        logger.warning(() -> "Login failed for username: " + username);
        showLoginError(message);
        clearPassword();
        jTextField1Username.requestFocus();
    }
    /**
     * Handle database errors
     */
    private void handleDatabaseError(DataAccessException e) {
        logger.log(Level.SEVERE, "Database error during authentication", e);
        JOptionPane.showMessageDialog(this, 
            "Unable to connect to the system. Please try again later.\n" +
            "Technical details: " + e.getMessage(), 
            "System Error", 
            JOptionPane.ERROR_MESSAGE);
    }
    /**
     * Handle unexpected errors
     */
    private void handleUnexpectedError(Exception e) {
        logger.log(Level.SEVERE, "Unexpected error during authentication", e);
        JOptionPane.showMessageDialog(this, 
            "An unexpected error occurred. Please contact support.\n" +
            "Technical details: " + e.getMessage(), 
            "System Error", 
            JOptionPane.ERROR_MESSAGE);
    }
    /**
     * Handle dashboard opening errors
     */
    private void handleDashboardError(Exception error, String username) {
        logger.log(Level.SEVERE, "Error opening dashboard for user: " + username, error);
        JOptionPane.showMessageDialog(this, 
            "Login successful, but there was an error opening the dashboard.\n" +
            "Error: " + error.getMessage() + 
            "\n\nPlease contact your system administrator.", 
            "Dashboard Error", 
            JOptionPane.ERROR_MESSAGE);
    }  
    /**
     * Opens the appropriate dashboard based on user role
     */
    private void openUserDashboard(User user) throws Exception {
        logger.info(() -> "Opening dashboard for user: " + user.getUsername() + ", Role ID: " + user.getRoleId());
        
        try {
            if (isSystemAdminRole(user)) {
                openSystemAdminDashboard();
            } else if (isAdminRole(user)) {
                openAdminDashboard(user);
            } else {
                openRegularUserDashboard(user);
            }
            
            logger.info(() -> "Dashboard opened successfully for user: " + user.getUsername());
            
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Failed to open dashboard for user: " + user.getUsername(), e);
            throw new Exception("Failed to open dashboard: " + getErrorMessage(e), e);
        }
    }   
    /**
     * Open System Admin dashboard
     */
    private void openSystemAdminDashboard() {
        try {
            SystemAdminPage systemAdminPage = new SystemAdminPage();
            systemAdminPage.setVisible(true);
            this.dispose();
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Error opening SystemAdmin dashboard", e);
            JOptionPane.showMessageDialog(this, 
                "Error opening SystemAdmin dashboard: " + e.getMessage(), 
                "Dashboard Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * Open Admin dashboard 
     */
    private void openAdminDashboard(User user) throws Exception {
        logger.info(() -> "Opening admin dashboard for user: " + user.getUsername());
        
        // Create Admin object from authenticated user
        Admin admin = new Admin(user);
        
        // Open the CompanyHomePage (Admin Dashboard)
        CompanyHomePage adminDashboard = new CompanyHomePage(admin);
        adminDashboard.setVisible(true);
        
        logger.info(() -> "Admin dashboard opened for user: " + user.getUsername());
    }
    /**
     * Open regular user dashboard
     */
    private void openRegularUserDashboard(User user) throws Exception {
        logger.info(() -> "Opening user dashboard for user: " + user.getUsername());
        NonAdmin nonAdmin = new NonAdmin(user);
        
        // TODO: Implement specific user dashboard - for now show message
        JOptionPane.showMessageDialog(null, 
            "User dashboard would open here.\n" +
            "User: " + user.getUsername() + " (Regular User)\n" +
            "Role ID: " + user.getRoleId(), 
            "User Dashboard", 
            JOptionPane.INFORMATION_MESSAGE);
    }
    /**
     * Determines if the user has SystemAdmin role
     */
    private boolean isSystemAdminRole(User user) {
        return user.getRoleId() == SYSTEM_ADMIN_ROLE_ID;
    }
    /**
     * Determines if the user has admin role - FIXED for your requirements
     * This will check if manuel.garcia (employee #1) should get admin access
     */
    private boolean isAdminRole(User user) {
        int roleId = user.getRoleId();
        int employeeId = user.getEmployeeId();
        String username = user.getUsername();
        
        // Log the details for debugging
        logger.info(() -> String.format("Checking admin role for user: %s, employeeId: %d, roleId: %d", 
                                      username, employeeId, roleId));
        
        // Check if this is manuel.garcia with employee ID 1 (your specific requirement)
        boolean isManuelGarcia = "manuel.garcia".equals(username) && employeeId == 1;
        
        // Check standard admin role IDs
        boolean hasAdminRoleId = (roleId == ADMIN_ROLE_ID);
        
        // Return true if either condition is met
        boolean isAdmin = isManuelGarcia || hasAdminRoleId;
        
        logger.info(() -> String.format("Admin check result for %s: %s (manuel.garcia: %s, adminRole: %s)", 
                                      username, isAdmin, isManuelGarcia, hasAdminRoleId));
        
        return isAdmin;       
    }//GEN-LAST:event_jButton1LogInActionPerformed

    private void jTextField1UsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1UsernameActionPerformed
        // Move focus to password field when Enter is pressed in username field
        jPasswordFieldPassword.requestFocus();
    }//GEN-LAST:event_jTextField1UsernameActionPerformed
    // Utility methods
    private void hideErrorMessage() {
        jLabelIncorrectCredentials.setVisible(false);
    }
    
    private void showLoginError(String message) {
        jLabelIncorrectCredentials.setText(message);
        jLabelIncorrectCredentials.setVisible(true);
    }
    
    private void showWarning(String message, javax.swing.JComponent focusComponent) {
        JOptionPane.showMessageDialog(this, message, "Login Error", JOptionPane.WARNING_MESSAGE);
        focusComponent.requestFocus();
    }
    
    private String getErrorMessage(Exception e) {
        String errorDetails = e.getMessage();
        return (errorDetails == null || errorDetails.trim().isEmpty()) ? 
               e.getClass().getSimpleName() : errorDetails;
    }
    
    // Public accessor methods
    public String getUsername() {
        return jTextField1Username.getText().trim();
    }
    
    public String getPassword() {
        return new String(jPasswordFieldPassword.getPassword());
    }
    
    public void clearUsername() {
        jTextField1Username.setText("");
    }
    
    public void clearPassword() {
        jPasswordFieldPassword.setText("");
    }
    
    public void clearFields() {
        clearUsername();
        clearPassword();
    }
    
    public void focusUsername() {
        jTextField1Username.requestFocus();
    }
    
    public void setIncorrectCredentialsVisible(boolean visible) {
        jLabelIncorrectCredentials.setVisible(visible);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginPage().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1LogIn;
    private javax.swing.JButton jButton2ForgotPassword;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel1Username;
    private javax.swing.JLabel jLabel3Password;
    private javax.swing.JLabel jLabelIncorrectCredentials;
    private javax.swing.JLabel jLabelLogo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordFieldPassword;
    private javax.swing.JTextField jTextField1Username;
    // End of variables declaration//GEN-END:variables
}