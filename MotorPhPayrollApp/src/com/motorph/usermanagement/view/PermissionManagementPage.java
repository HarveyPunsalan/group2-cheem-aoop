/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.motorph.usermanagement.view;

import com.motorph.usermanagement.controller.PermissionController;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

/**
 *
 * @author harvey punsalan
 */
public class PermissionManagementPage extends javax.swing.JPanel {
    private PermissionController permissionController;

    /**
     * Creates new form PermissionManagementPage
     */
    public PermissionManagementPage() {
        initComponents();
        setupController();
        setupEventHandlers();
        loadInitialData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelPermissionDetails = new javax.swing.JLabel();
        jLabelPermissionID = new javax.swing.JLabel();
        jLabelAccessName = new javax.swing.JLabel();
        jLabelCategory = new javax.swing.JLabel();
        jLabelResource = new javax.swing.JLabel();
        jLabelAction = new javax.swing.JLabel();
        jLabelReqApproval = new javax.swing.JLabel();
        jLabelStatus = new javax.swing.JLabel();
        jTextFieldPermissionID = new javax.swing.JTextField();
        jTextFieldAccessName = new javax.swing.JTextField();
        jComboBoxSelCategory = new javax.swing.JComboBox<>();
        jComboBoxSelResource = new javax.swing.JComboBox<>();
        jComboBoxSelActions = new javax.swing.JComboBox<>();
        jCheckBoxApproval = new javax.swing.JCheckBox();
        jCheckBoxActive = new javax.swing.JCheckBox();
        jButtonSavePermission = new javax.swing.JButton();
        jButtonUpdatePermission = new javax.swing.JButton();
        jButtonClearForm = new javax.swing.JButton();
        jButtonDeletePermission = new javax.swing.JButton();
        jLabelAllPermissions = new javax.swing.JLabel();
        jTextFieldSearchPermissions = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePermissionInfo = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(844, 0));

        jLabelPermissionDetails.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabelPermissionDetails.setText("PermissionDetails");

        jLabelPermissionID.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabelPermissionID.setText("Permission ID:");

        jLabelAccessName.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabelAccessName.setText("Access Name:");

        jLabelCategory.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabelCategory.setText("Category:");

        jLabelResource.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabelResource.setText("Resource:");

        jLabelAction.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabelAction.setText("Action:");

        jLabelReqApproval.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabelReqApproval.setText("Requires Approval:");

        jLabelStatus.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabelStatus.setText("Status:");

        jTextFieldAccessName.setText("Enter Permission Name");

        jComboBoxSelCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Category", "Payroll Management", "Employee Management", "System Administration" }));

        jComboBoxSelResource.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Resource", "Employee Data", "Payroll Records", "System Settings" }));

        jComboBoxSelActions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Actions", "Create", "Read", "Update", "Delete" }));

        jCheckBoxApproval.setText("Requires Approval");

        jCheckBoxActive.setText("Active");

        jButtonSavePermission.setBackground(new java.awt.Color(255, 255, 255));
        jButtonSavePermission.setForeground(new java.awt.Color(0, 0, 0));
        jButtonSavePermission.setText("Save Permission");

        jButtonUpdatePermission.setBackground(new java.awt.Color(255, 255, 255));
        jButtonUpdatePermission.setForeground(new java.awt.Color(0, 0, 0));
        jButtonUpdatePermission.setText("Update Permission");

        jButtonClearForm.setBackground(new java.awt.Color(255, 255, 255));
        jButtonClearForm.setForeground(new java.awt.Color(0, 0, 0));
        jButtonClearForm.setText("Clear Form");

        jButtonDeletePermission.setBackground(new java.awt.Color(255, 255, 255));
        jButtonDeletePermission.setForeground(new java.awt.Color(0, 0, 0));
        jButtonDeletePermission.setText("Delete Permission");

        jLabelAllPermissions.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabelAllPermissions.setText("All Permissions");

        jTextFieldSearchPermissions.setText("Search Permissions");

        jTablePermissionInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Access Name", "Category", "Resource", "Action", "Requires Approval", "Status", "Created at", "Actions"
            }
        ));
        jScrollPane1.setViewportView(jTablePermissionInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelReqApproval)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jCheckBoxApproval, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelCategory)
                                            .addComponent(jLabelResource)
                                            .addComponent(jLabelAction))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jComboBoxSelCategory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBoxSelResource, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBoxSelActions, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelAccessName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextFieldAccessName, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabelPermissionDetails)
                                                .addGap(45, 45, 45))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabelPermissionID)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addComponent(jTextFieldPermissionID, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelStatus)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldSearchPermissions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jCheckBoxActive, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jLabelAllPermissions)))
                        .addGap(107, 107, 107)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonUpdatePermission, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonSavePermission, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonDeletePermission, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonClearForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 153, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabelPermissionDetails)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelPermissionID))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldPermissionID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSavePermission))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelAccessName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelCategory)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelResource)
                                .addGap(12, 12, 12)
                                .addComponent(jLabelAction))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldAccessName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxSelCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxSelResource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxSelActions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelReqApproval)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelStatus))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBoxApproval)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxActive))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jButtonUpdatePermission)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonClearForm)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDeletePermission)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAllPermissions)
                    .addComponent(jTextFieldSearchPermissions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Initialize the controller
     */
    private void setupController() {
        this.permissionController = new PermissionController(this);
    }
    
    /**
     * Setup event handlers for all buttons and components
     */
    private void setupEventHandlers() {
        // Save Permission Button
        jButtonSavePermission.addActionListener(e -> savePermission());
        
        // Update Permission Button
        jButtonUpdatePermission.addActionListener(e -> updatePermission());
        
        // Clear Form Button
        jButtonClearForm.addActionListener(e -> clearForm());
        
        // Delete Permission Button
        jButtonDeletePermission.addActionListener(e -> deletePermission());
        
        // Table selection listener
        jTablePermissionInfo.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                loadSelectedPermissionToForm();
            }
        });
        
        // Search field listener
        jTextFieldSearchPermissions.addActionListener(e -> searchPermissions());
        
        // Clear placeholder text when focused
        jTextFieldAccessName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (jTextFieldAccessName.getText().equals("Enter Permission Name")) {
                    jTextFieldAccessName.setText("");
                }
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (jTextFieldAccessName.getText().isEmpty()) {
                    jTextFieldAccessName.setText("Enter Permission Name");
                }
            }
        });
        
        jTextFieldSearchPermissions.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (jTextFieldSearchPermissions.getText().equals("Search Permissions")) {
                    jTextFieldSearchPermissions.setText("");
                }
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (jTextFieldSearchPermissions.getText().isEmpty()) {
                    jTextFieldSearchPermissions.setText("Search Permissions");
                }
            }
        });
    }
    
    /**
     * Load initial data when the form opens
     */
     private void loadInitialData() {
        if (permissionController != null) {
            permissionController.loadAllPermissions();
        }
    }
    
    /**
     * Save a new permission
     */
     private void savePermission() {
        try {
            String accessName = jTextFieldAccessName.getText().trim();
            
            // Validate input
            if (accessName.isEmpty() || accessName.equals("Enter Permission Name")) {
                JOptionPane.showMessageDialog(this, "Please enter a permission name", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (jComboBoxSelCategory.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Please select a category", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (jComboBoxSelResource.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Please select a resource", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (jComboBoxSelActions.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Please select an action", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Get values
            int categoryId = jComboBoxSelCategory.getSelectedIndex();
            int resourceId = jComboBoxSelResource.getSelectedIndex();
            int actionId = jComboBoxSelActions.getSelectedIndex();
            boolean requiresApproval = jCheckBoxApproval.isSelected();
            
            // Call controller to save permission
            permissionController.createPermission(accessName, categoryId, resourceId, actionId, requiresApproval);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error saving permission: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Update existing permission
     */
     private void updatePermission() {
        try {
            String permissionIdText = jTextFieldPermissionID.getText().trim();
            
            if (permissionIdText.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please select a permission to update", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            int permissionId = Integer.parseInt(permissionIdText);
            String accessName = jTextFieldAccessName.getText().trim();
            
            // Validate input
            if (accessName.isEmpty() || accessName.equals("Enter Permission Name")) {
                JOptionPane.showMessageDialog(this, "Please enter a permission name", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Get values
            int categoryId = jComboBoxSelCategory.getSelectedIndex();
            int resourceId = jComboBoxSelResource.getSelectedIndex();
            int actionId = jComboBoxSelActions.getSelectedIndex();
            boolean requiresApproval = jCheckBoxApproval.isSelected();
            
            // Call controller to update permission
            permissionController.updatePermission(permissionId, accessName, categoryId, resourceId, actionId, requiresApproval);
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid permission ID", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error updating permission: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Delete permission
     */
     private void deletePermission() {
        try {
            String permissionIdText = jTextFieldPermissionID.getText().trim();
            
            if (permissionIdText.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please select a permission to delete", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            int permissionId = Integer.parseInt(permissionIdText);
            
            // Confirm deletion
            int confirm = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to deactivate this permission?",
                "Confirm Delete",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
            );
            
            if (confirm == JOptionPane.YES_OPTION) {
                // Deactivate permission instead of deleting
                permissionController.setPermissionStatus(permissionId, false);
            }
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid permission ID", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error deleting permission: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Clear all form fields
     */
    private void clearForm() {
        jTextFieldPermissionID.setText("");
        jTextFieldAccessName.setText("Enter Permission Name");
        jComboBoxSelCategory.setSelectedIndex(0);
        jComboBoxSelResource.setSelectedIndex(0);
        jComboBoxSelActions.setSelectedIndex(0);
        jCheckBoxApproval.setSelected(false);
        jCheckBoxActive.setSelected(true);
        
        // Clear table selection
        jTablePermissionInfo.clearSelection();
    }
    
    /**
     * Load selected permission from table to form
     */
    private void loadSelectedPermissionToForm() {
        int selectedRow = jTablePermissionInfo.getSelectedRow();
        
        if (selectedRow >= 0) {
            // Get values from selected row
            String permissionId = jTablePermissionInfo.getValueAt(selectedRow, 0).toString();
            String accessName = jTablePermissionInfo.getValueAt(selectedRow, 1).toString();
            String category = jTablePermissionInfo.getValueAt(selectedRow, 2).toString();
            String resource = jTablePermissionInfo.getValueAt(selectedRow, 3).toString();
            String action = jTablePermissionInfo.getValueAt(selectedRow, 4).toString();
            String requiresApproval = jTablePermissionInfo.getValueAt(selectedRow, 5).toString();
            String status = jTablePermissionInfo.getValueAt(selectedRow, 6).toString();
            
            // Set form values
            jTextFieldPermissionID.setText(permissionId);
            jTextFieldAccessName.setText(accessName);
            
            // Set combo box selections (this is simplified - you might need to map these properly)
            setComboBoxSelection(jComboBoxSelCategory, category);
            setComboBoxSelection(jComboBoxSelResource, resource);
            setComboBoxSelection(jComboBoxSelActions, action);
            
            jCheckBoxApproval.setSelected("Yes".equals(requiresApproval));
            jCheckBoxActive.setSelected("Active".equals(status));
        }
    }
    
    /**
     * Helper method to set combo box selection by text
     */
    private void setComboBoxSelection(javax.swing.JComboBox<String> comboBox, String value) {
        for (int i = 0; i < comboBox.getItemCount(); i++) {
            if (comboBox.getItemAt(i).equals(value)) {
                comboBox.setSelectedIndex(i);
                break;
            }
        }
    }
    
    /**
     * Search permissions (basic implementation)
     */
    private void searchPermissions() {
        String searchTerm = jTextFieldSearchPermissions.getText().trim();
        if (!searchTerm.isEmpty() && !searchTerm.equals("Search Permissions")) {
            // You can implement search logic here
            // For now, just reload all permissions
            permissionController.loadAllPermissions();
        }
    }
    
    /**
     * Sets the table model for the permission table.
     * This method is called by the PermissionController to update the table data.
     * 
     * @param tableModel the DefaultTableModel to set for the permission table
     */
    public void setTableModel(DefaultTableModel tableModel) {
        if (jTablePermissionInfo != null) {
            jTablePermissionInfo.setModel(tableModel);
            
            // Auto-resize columns to fit content
            jTablePermissionInfo.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
            
            // Set column widths for better display
            if (tableModel.getColumnCount() > 0) {
                javax.swing.table.TableColumnModel columnModel = jTablePermissionInfo.getColumnModel();
                
                // Set preferred widths for each column
                columnModel.getColumn(0).setPreferredWidth(80);  // Permission ID
                columnModel.getColumn(1).setPreferredWidth(150); // Name
                columnModel.getColumn(2).setPreferredWidth(120); // Category
                columnModel.getColumn(3).setPreferredWidth(120); // Resource
                columnModel.getColumn(4).setPreferredWidth(80);  // Action
                columnModel.getColumn(5).setPreferredWidth(120); // Requires Approval
                columnModel.getColumn(6).setPreferredWidth(80);  // Status
            }
            
            // Refresh the table display
            jTablePermissionInfo.revalidate();
            jTablePermissionInfo.repaint();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClearForm;
    private javax.swing.JButton jButtonDeletePermission;
    private javax.swing.JButton jButtonSavePermission;
    private javax.swing.JButton jButtonUpdatePermission;
    private javax.swing.JCheckBox jCheckBoxActive;
    private javax.swing.JCheckBox jCheckBoxApproval;
    private javax.swing.JComboBox<String> jComboBoxSelActions;
    private javax.swing.JComboBox<String> jComboBoxSelCategory;
    private javax.swing.JComboBox<String> jComboBoxSelResource;
    private javax.swing.JLabel jLabelAccessName;
    private javax.swing.JLabel jLabelAction;
    private javax.swing.JLabel jLabelAllPermissions;
    private javax.swing.JLabel jLabelCategory;
    private javax.swing.JLabel jLabelPermissionDetails;
    private javax.swing.JLabel jLabelPermissionID;
    private javax.swing.JLabel jLabelReqApproval;
    private javax.swing.JLabel jLabelResource;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablePermissionInfo;
    private javax.swing.JTextField jTextFieldAccessName;
    private javax.swing.JTextField jTextFieldPermissionID;
    private javax.swing.JTextField jTextFieldSearchPermissions;
    // End of variables declaration//GEN-END:variables
}
