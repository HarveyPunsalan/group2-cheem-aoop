/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frame.NonAdmin;

import Class.ComponentsValidator;
import Class.EMS.Employee;
import Class.EntityManagement.EntityManager;
import Class.EntityManagement.EntityType;
import Class.Input;
import Class.PPS.*;
import Class.PromptComboBoxRenderer;
import Class.TAT.AttendanceService;
import Class.TAT.DailyAttendance;
import Class.TAT.Leave;
import Class.TAT.LeaveService;
import Class.TAT.Overtime;
import Class.TAT.Request;
import Class.UMS.Access;
import Class.UMS.Admin;
import Class.UMS.User;
import Frame.LoginPage;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.DefaultComboBoxModel;
import java.sql.Connection;
import database.connection.DBConnection; 
import java.time.LocalDate;
import java.time.LocalTime;




/**
 *
 * @author Charm
 */
public class RequestCenter extends javax.swing.JFrame {
    PayrollService payPeriodList = new PayrollService();
    Connection conn = DBConnection.getConnection();
    LeaveService leaveTypeList = new LeaveService(conn);
    AttendanceService dtrManager = new AttendanceService(conn);

    User user;
    
    public RequestCenter() {
        initComponents();
        jDateChooser1Overtime.setVisible(false);
        jButton1CalculateDays.setVisible(false);
        jButton1Calculate.setVisible(false);
        jComboBox1AMPM.setVisible(false);
        jComboBox2AMPM.setVisible(false);        
        
        user.addLogoutListener(this);
        
        jComboBoxAttendancePeriod.setModel(payPeriodList.getComboBoxModel());
        jComboBoxAttendancePeriod.setRenderer(new PromptComboBoxRenderer("Select Pay Period") );
        jComboBoxAttendancePeriod.setSelectedIndex(-1);
        jComboBoxOvertimeDate.setEnabled(false);
        jTextField5OvertimeStart.setText("0");
        jTextField4OvertimeEnd.setText("0");
        jTextField1TotalOvertime.setText("0");
        
        DefaultComboBoxModel<String> testModel = leaveTypeList.getLeaveTypeComboBoxModel();
        System.out.println("Leave type count: " + testModel.getSize());
        for (int i = 0; i < testModel.getSize(); i++) {
            System.out.println("Leave type: " + testModel.getElementAt(i));
        }
        jComboBoxLeaveType.setModel(testModel);
        jComboBoxLeaveType.setRenderer(new PromptComboBoxRenderer("Select Leave Type"));
        jComboBoxLeaveType.setSelectedIndex(-1);
        

        
        Input.addDateValidation(jDateChooser1StartDate, jDateChooser2EndDate, jTextFieldTotalDays); // Attach validation
    }
    
    public RequestCenter(User user) {
        initComponents();
        jDateChooser1Overtime.setVisible(false);
        jButton1CalculateDays.setVisible(false);
        jButton1Calculate.setVisible(false);
        jComboBox1AMPM.setVisible(false);
        jComboBox2AMPM.setVisible(false); 
        this.user = user;
        user.addLogoutListener(this);
        
        jComboBoxAttendancePeriod.setModel(payPeriodList.getComboBoxModel());
        jComboBoxAttendancePeriod.setRenderer(new PromptComboBoxRenderer("Select Pay Period") );
        jComboBoxAttendancePeriod.setSelectedIndex(-1);
        jComboBoxOvertimeDate.setEnabled(false);
        jTextField5OvertimeStart.setText("0");
        jTextField4OvertimeEnd.setText("0");
        jTextField1TotalOvertime.setText("0");
        
        jComboBoxLeaveType.setModel(leaveTypeList.getLeaveTypeComboBoxModel());        
        jComboBoxLeaveType.setRenderer(new PromptComboBoxRenderer("Select Leave Type") );
        jComboBoxLeaveType.setSelectedIndex(-1);        
        jTextFieldTotalDays.setText("0");
        
        Input.addDateValidation(jDateChooser1StartDate, jDateChooser2EndDate, jTextFieldTotalDays); // Attach validation
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1RequestCenter = new javax.swing.JButton();
        jButton3AttendanceRecord = new javax.swing.JButton();
        jButton4Payslip = new javax.swing.JButton();
        jButton6LogOut = new javax.swing.JButton();
        jButton3TimeClock = new javax.swing.JButton();
        jButton4EmployeeRequest = new javax.swing.JButton();
        jTabbedPane1SubmitOvertime = new javax.swing.JTabbedPane();
        jPanel4SubmitOvertime = new javax.swing.JPanel();
        jLabel1OvertimeDate = new javax.swing.JLabel();
        jDateChooser1Overtime = new com.toedter.calendar.JDateChooser();
        jLabel4OvertimeStart = new javax.swing.JLabel();
        jLabel5OvertimeEnd = new javax.swing.JLabel();
        jTextField4OvertimeEnd = new javax.swing.JTextField();
        jTextField5OvertimeStart = new javax.swing.JTextField();
        jLabel6TotalOvertime = new javax.swing.JLabel();
        jTextField1TotalOvertime = new javax.swing.JTextField();
        jButton1SubmitOvertime = new javax.swing.JButton();
        jComboBox1AMPM = new javax.swing.JComboBox<>();
        jComboBox2AMPM = new javax.swing.JComboBox<>();
        jLabel1ValidationErrors = new javax.swing.JLabel();
        jButton1Calculate = new javax.swing.JButton();
        jLabelAttendancePeriod = new javax.swing.JLabel();
        jComboBoxAttendancePeriod = new javax.swing.JComboBox<>();
        jComboBoxOvertimeDate = new javax.swing.JComboBox<>();
        jPanel3SubmitLeave = new javax.swing.JPanel();
        jDateChooser1StartDate = new com.toedter.calendar.JDateChooser();
        jDateChooser2EndDate = new com.toedter.calendar.JDateChooser();
        jLabel1StartDate = new javax.swing.JLabel();
        jLabel2EndDate = new javax.swing.JLabel();
        jComboBoxLeaveType = new javax.swing.JComboBox<>();
        jLabel3LeaveType = new javax.swing.JLabel();
        jLabel4TotalDays = new javax.swing.JLabel();
        jTextFieldTotalDays = new javax.swing.JTextField();
        jLabel5Notes = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1Notes = new javax.swing.JTextArea();
        jButton1CalculateDays = new javax.swing.JButton();
        jButton1SubmitLeave = new javax.swing.JButton();
        jLabel1ValidationForLeave = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        jButton1RequestCenter.setBackground(new java.awt.Color(0, 102, 153));
        jButton1RequestCenter.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1RequestCenter.setForeground(new java.awt.Color(255, 255, 255));
        jButton1RequestCenter.setText("Attendance");
        jButton1RequestCenter.setBorder(null);
        jButton1RequestCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1RequestCenterActionPerformed(evt);
            }
        });

        jButton3AttendanceRecord.setBackground(new java.awt.Color(0, 102, 153));
        jButton3AttendanceRecord.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3AttendanceRecord.setForeground(new java.awt.Color(255, 255, 255));
        jButton3AttendanceRecord.setText("Informations");
        jButton3AttendanceRecord.setBorder(null);
        jButton3AttendanceRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3AttendanceRecordActionPerformed(evt);
            }
        });

        jButton4Payslip.setBackground(new java.awt.Color(0, 102, 153));
        jButton4Payslip.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton4Payslip.setForeground(new java.awt.Color(255, 255, 255));
        jButton4Payslip.setText("Payslip");
        jButton4Payslip.setBorder(null);
        jButton4Payslip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4PayslipActionPerformed(evt);
            }
        });

        jButton6LogOut.setBackground(new java.awt.Color(0, 102, 153));
        jButton6LogOut.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jButton6LogOut.setForeground(new java.awt.Color(255, 255, 255));
        jButton6LogOut.setText("Log Out");
        jButton6LogOut.setBorder(null);
        jButton6LogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6LogOutActionPerformed(evt);
            }
        });

        jButton3TimeClock.setBackground(new java.awt.Color(0, 102, 153));
        jButton3TimeClock.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3TimeClock.setForeground(new java.awt.Color(255, 255, 255));
        jButton3TimeClock.setText("Admin Portal");
        jButton3TimeClock.setBorder(null);
        jButton3TimeClock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3TimeClockActionPerformed(evt);
            }
        });

        jButton4EmployeeRequest.setBackground(new java.awt.Color(0, 102, 153));
        jButton4EmployeeRequest.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton4EmployeeRequest.setForeground(new java.awt.Color(255, 255, 255));
        jButton4EmployeeRequest.setText("Request");
        jButton4EmployeeRequest.setBorder(null);
        jButton4EmployeeRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4EmployeeRequestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1RequestCenter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3AttendanceRecord, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(jButton4Payslip, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(jButton6LogOut, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(jButton3TimeClock, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(jButton4EmployeeRequest, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(jButton3TimeClock)
                .addGap(30, 30, 30)
                .addComponent(jButton3AttendanceRecord)
                .addGap(30, 30, 30)
                .addComponent(jButton1RequestCenter)
                .addGap(30, 30, 30)
                .addComponent(jButton4Payslip)
                .addGap(30, 30, 30)
                .addComponent(jButton4EmployeeRequest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6LogOut)
                .addContainerGap())
        );

        jLabel1OvertimeDate.setText("Date:");

        jLabel4OvertimeStart.setText("Start time: ");

        jLabel5OvertimeEnd.setText("End time: ");

        jTextField4OvertimeEnd.setEditable(false);

        jTextField5OvertimeStart.setEditable(false);

        jLabel6TotalOvertime.setText("Total overtime hours:");

        jTextField1TotalOvertime.setEditable(false);

        jButton1SubmitOvertime.setText("Submit");
        jButton1SubmitOvertime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1SubmitOvertimeActionPerformed(evt);
            }
        });

        jComboBox1AMPM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AM", "PM" }));

        jComboBox2AMPM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AM", "PM" }));

        jButton1Calculate.setText("Calculate");
        jButton1Calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1CalculateActionPerformed(evt);
            }
        });

        jLabelAttendancePeriod.setText("Attendance Period");

        jComboBoxAttendancePeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAttendancePeriodActionPerformed(evt);
            }
        });

        jComboBoxOvertimeDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOvertimeDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4SubmitOvertimeLayout = new javax.swing.GroupLayout(jPanel4SubmitOvertime);
        jPanel4SubmitOvertime.setLayout(jPanel4SubmitOvertimeLayout);
        jPanel4SubmitOvertimeLayout.setHorizontalGroup(
            jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4SubmitOvertimeLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4SubmitOvertimeLayout.createSequentialGroup()
                        .addGroup(jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1OvertimeDate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelAttendancePeriod))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4SubmitOvertimeLayout.createSequentialGroup()
                                .addComponent(jComboBoxOvertimeDate, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jDateChooser1Overtime, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73))
                            .addGroup(jPanel4SubmitOvertimeLayout.createSequentialGroup()
                                .addComponent(jComboBoxAttendancePeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel4SubmitOvertimeLayout.createSequentialGroup()
                        .addGroup(jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4SubmitOvertimeLayout.createSequentialGroup()
                                .addComponent(jLabel4OvertimeStart, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jTextField5OvertimeStart, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel4SubmitOvertimeLayout.createSequentialGroup()
                                    .addComponent(jLabel6TotalOvertime, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField1TotalOvertime))
                                .addGroup(jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1ValidationErrors, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel4SubmitOvertimeLayout.createSequentialGroup()
                                        .addComponent(jLabel5OvertimeEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(jTextField4OvertimeEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGroup(jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4SubmitOvertimeLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBox2AMPM, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4SubmitOvertimeLayout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(jComboBox1AMPM, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(89, 89, 89))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4SubmitOvertimeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1Calculate, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addComponent(jButton1SubmitOvertime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(199, 199, 199))
        );
        jPanel4SubmitOvertimeLayout.setVerticalGroup(
            jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4SubmitOvertimeLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAttendancePeriod)
                    .addComponent(jComboBoxAttendancePeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1OvertimeDate)
                        .addComponent(jComboBoxOvertimeDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateChooser1Overtime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4OvertimeStart)
                    .addComponent(jTextField5OvertimeStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1AMPM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5OvertimeEnd)
                    .addComponent(jTextField4OvertimeEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2AMPM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel4SubmitOvertimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6TotalOvertime)
                    .addComponent(jTextField1TotalOvertime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1ValidationErrors)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1Calculate)
                .addGap(18, 18, 18)
                .addComponent(jButton1SubmitOvertime)
                .addContainerGap())
        );

        jTabbedPane1SubmitOvertime.addTab("Overtime", jPanel4SubmitOvertime);

        jDateChooser1StartDate.setDateFormatString("yyyy-MM-dd");

        jDateChooser2EndDate.setDateFormatString("yyyy-MM-dd");

        jLabel1StartDate.setText("Start Date:");

        jLabel2EndDate.setText("End Date:");

        jLabel3LeaveType.setText("Leave Type:");

        jLabel4TotalDays.setText("Total Days:");

        jTextFieldTotalDays.setEditable(false);

        jLabel5Notes.setText("Notes:");

        jTextArea1Notes.setColumns(20);
        jTextArea1Notes.setRows(5);
        jScrollPane1.setViewportView(jTextArea1Notes);

        jButton1CalculateDays.setText("Calculate");
        jButton1CalculateDays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1CalculateDaysActionPerformed(evt);
            }
        });

        jButton1SubmitLeave.setText("Submit");
        jButton1SubmitLeave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1SubmitLeaveActionPerformed(evt);
            }
        });

        jLabel1ValidationForLeave.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel3SubmitLeaveLayout = new javax.swing.GroupLayout(jPanel3SubmitLeave);
        jPanel3SubmitLeave.setLayout(jPanel3SubmitLeaveLayout);
        jPanel3SubmitLeaveLayout.setHorizontalGroup(
            jPanel3SubmitLeaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3SubmitLeaveLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1ValidationForLeave, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3SubmitLeaveLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3SubmitLeaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3SubmitLeaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel4TotalDays, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2EndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3LeaveType, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                        .addComponent(jLabel1StartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5Notes, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel3SubmitLeaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1SubmitLeave, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3SubmitLeaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jComboBoxLeaveType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jDateChooser2EndDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jDateChooser1StartDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3SubmitLeaveLayout.createSequentialGroup()
                            .addComponent(jTextFieldTotalDays, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jButton1CalculateDays, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1)))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        jPanel3SubmitLeaveLayout.setVerticalGroup(
            jPanel3SubmitLeaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3SubmitLeaveLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3SubmitLeaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1StartDate)
                    .addComponent(jDateChooser1StartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel3SubmitLeaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2EndDate)
                    .addComponent(jDateChooser2EndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel3SubmitLeaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxLeaveType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3LeaveType))
                .addGap(30, 30, 30)
                .addGroup(jPanel3SubmitLeaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4TotalDays)
                    .addComponent(jTextFieldTotalDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1CalculateDays))
                .addGap(15, 15, 15)
                .addComponent(jLabel1ValidationForLeave)
                .addGap(15, 15, 15)
                .addGroup(jPanel3SubmitLeaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5Notes)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jButton1SubmitLeave)
                .addGap(26, 26, 26))
        );

        jTabbedPane1SubmitOvertime.addTab("Leave", jPanel3SubmitLeave);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jTabbedPane1SubmitOvertime, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jTabbedPane1SubmitOvertime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 69, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6LogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6LogOutActionPerformed
        LoginPage loginPage = new LoginPage();
        loginPage.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton6LogOutActionPerformed

    private void jButton1SubmitOvertimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1SubmitOvertimeActionPerformed
        String errors = validateOvertimeFields();
        if (!errors.isEmpty()) {
            JOptionPane.showMessageDialog(null, errors, "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String[] overtimeData = {user.getEmployeeID(),
                                jComboBoxOvertimeDate.getSelectedItem().toString(),
                                jTextField5OvertimeStart.getText(),
                                jTextField4OvertimeEnd.getText(),
                                jTextField1TotalOvertime.getText()
                                };
        Overtime newOvertime = new Overtime();
        newOvertime.setEmployeeID(user.getEmployeeID());
        newOvertime.setDate(LocalDate.parse(jComboBoxOvertimeDate.getSelectedItem().toString()));
        newOvertime.setStartTime(LocalTime.parse(jTextField5OvertimeStart.getText()));
        newOvertime.setEndTime(LocalTime.parse(jTextField4OvertimeEnd.getText()));
        newOvertime.setTotalHours(Double.parseDouble(jTextField1TotalOvertime.getText()));
        newOvertime.setRequestID(null);
        newOvertime.setDtrId(null);
        newOvertime.setPayableHours(null);
        newOvertime.setApproved(false);
        newOvertime.setNotes(null);

        
        String[] requestData = {newOvertime.getID(),user.getEmployeeID(),LocalDate.now().toString(), ""};     
        Request newRequest = new Request(requestData);
        
        EntityManager request = new EntityManager(EntityType.REQUEST);
        EntityManager overtime = new EntityManager(EntityType.OVERTIME);
        
        try {
            request.addEntityRecord(newRequest);
            overtime.addEntityRecord(newOvertime);
        } catch (Exception ex) {
            Logger.getLogger(RequestCenter.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        JOptionPane.showMessageDialog(null, "Successfully Requested"); // Confirmation message   
        clearOvertimeFields();
//        // 1. Date validation
//        Date overtimeDate = jDateChooser1Overtime.getDate();
//        if (overtimeDate == null) {
//            showValidationError("Invalid entry");
//            return;
//        }
//
//        // 2. Time validation (start and end time format and logical validation)
//        String startTime = jTextField5OvertimeStart.getText();
//        String endTime = jTextField4OvertimeEnd.getText();
//
//        // 3. Create a Overtime object to use time validation methods 
//        Overtime validation = null;
//            try {
//                validation = new Overtime("OT", overtimeDate, startTime, endTime, overtimeDate);
//            } catch (IOException ex) {
//                Logger.getLogger(RequestCenter.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        // 4. Check if the time format is valid (HH:MM)  
//        if (!validation.isValidTimeFormat(startTime)|| !validation.isValidTimeFormat(endTime)) {
//            showValidationError("Time must be in HH:MM format.");
//            return;
//        }
//
//        if (validation.compareTimes(startTime, endTime) > 0 || startTime.equals(endTime)) {
//            showValidationError("Invalid entry");
//            return;
//        }
//
//        // OT date cannot be a future date
//        LocalDate overtimeLocalDate = overtimeDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
//        if (overtimeLocalDate.isAfter(LocalDate.now())) {
//            showValidationError("Invalid entry");
//            return;
//        }
//
//        // 5. Combine time with AM/PM
//        startTime += " " + jComboBox1AMPM.getSelectedItem();
//        endTime += " " + jComboBox2AMPM.getSelectedItem();
//
//        // 6. Process the request if everything is valid
//        // Create an Overtime instance
//        Overtime overtime = null;
//            try {
//                overtime = new Overtime("OT", overtimeDate, startTime, endTime, overtimeDate);
//            } catch (IOException ex) {
//                Logger.getLogger(RequestCenter.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        // 7. Calculate total overtime
//        overtime.calculateTotalOvertime();
//
//        // 8. Process the request (save to CSV)
//        overtime.processRequest();
//
//        // 9. Clear the fields after submission
//        jTextField5OvertimeStart.setText("");
//        jTextField4OvertimeEnd.setText("");
//        jComboBox1AMPM.setSelectedIndex(0);
//        jComboBox2AMPM.setSelectedIndex(0);
//        jDateChooser1Overtime.setDate(null);  
//        jLabel1ValidationErrors.setText("");
//        jTextField1TotalOvertime.setText("");
//        
//        // Clear any previous error messages
//        jLabel1ValidationErrors.setText("");
//    }
//
//    // Method to show validation error message
//    private void showValidationError(String message) {
//        // Display validation error message
//        jLabel1ValidationErrors.setText(message);
//        jLabel1ValidationErrors.setForeground(Color.RED);
//    
        
        
    }//GEN-LAST:event_jButton1SubmitOvertimeActionPerformed

    private void jButton1CalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1CalculateActionPerformed
//        // 1. Date validation
//        Date overtimeDate = jDateChooser1Overtime.getDate();
//        if (overtimeDate == null) {
//           showValidationError("Invalid entry");
//           return;
//        }
//
//        // 2. Time validation (start and end time format and logical validation)
//        String startTime = jTextField5OvertimeStart.getText();
//        String endTime = jTextField4OvertimeEnd.getText();
//
//        // 3. Create a Request object to use time validation methods 
//        Overtime validation = null;
//        try {
//            validation = new Overtime("OT", overtimeDate, startTime, endTime, overtimeDate);
//        } catch (IOException ex) {
//            Logger.getLogger(RequestCenter.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        // 4. Check if the time format is valid (HH:MM)
//        if (!validation.isValidTimeFormat(startTime)|| !validation.isValidTimeFormat(endTime)) {
//           showValidationError("Time must be in HH:MM format.");
//           return;
//        }
//
//        // 5. End time cannot be before the start time
//        if (validation.compareTimes(startTime, endTime) > 0 || startTime.equals(endTime)) {
//           showValidationError("Invalid entry");
//           return;
//        }
//        
//        // OT date cannot be a future date
//        LocalDate overtimeLocalDate = overtimeDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
//        if (overtimeLocalDate.isAfter(LocalDate.now())) {
//            showValidationError("Invalid entry");
//            return;
//        }
//
//        // 6. Combine time with AM/PM
//        startTime += " " + jComboBox1AMPM.getSelectedItem();
//        endTime += " " + jComboBox2AMPM.getSelectedItem();
//
//        // 7. Calculate total overtime 
//        Overtime overtime = null;
//        try {
//            overtime = new Overtime("OT",overtimeDate, startTime, endTime, overtimeDate);
//        } catch (IOException ex) {
//            Logger.getLogger(RequestCenter.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        overtime.calculateTotalOvertime();
//
//        // 8. Display the result in the text field (total overtime hours)
//        jTextField1TotalOvertime.setText(String.format("%.2f", overtime.totalOvertime));
//
//        // 9. Clear any previous error messages
//        jLabel1ValidationErrors.setText("");
    }//GEN-LAST:event_jButton1CalculateActionPerformed

    private void jButton1CalculateDaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1CalculateDaysActionPerformed
//        // Clear previous validation message
//        jLabel1ValidationForLeave.setText("");
//
//        // 1. Get the start date and end date 
//        Date startDate = jDateChooser1StartDate.getDate();
//        Date endDate = jDateChooser2EndDate.getDate();
//
//        // 2. Check if both start date and end date are selected
//        if ((startDate == null || endDate == null) || ((endDate.before(startDate))) ) {
//            jLabel1ValidationForLeave.setText("Invalid entry");
//            return;
//        }
//
//        // 3. Retrieve leave type and notes 
//        String leaveType = (String) jComboBoxLeaveType.getSelectedItem(); 
//        String notes = jTextArea1Notes.getText(); 
//
//        // 4. Get the current date as requestDate 
//        Date requestDate = new Date();
//
//        // 5. Create the Leave object with all required parameters
//        Leave leaveRequest = null;
//            try {
//                leaveRequest = new Leave(startDate, endDate, leaveType, notes, requestDate);
//            } catch (IOException ex) {
//                Logger.getLogger(RequestCenter.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        // 6. Calculate the total leave days 
//        double totalDays = leaveRequest.calculateTotalDays(startDate, endDate);
//
//        // 7. Display the total days in the text field
//        jTextFieldTotalDays.setText(String.format("%.2f", totalDays));
    }//GEN-LAST:event_jButton1CalculateDaysActionPerformed

    private void jButton1SubmitLeaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1SubmitLeaveActionPerformed
        String errors = validateLeaveFields();
        if (!errors.isEmpty()) {
            JOptionPane.showMessageDialog(null, errors, "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        EntityManager request = new EntityManager(EntityType.REQUEST);
        EntityManager leave = new EntityManager(EntityType.LEAVE);
        
        String[] LeaveData = {user.getEmployeeID(),
                                ((JTextField)jDateChooser1StartDate.getDateEditor().getUiComponent()).getText(),
                                ((JTextField)jDateChooser2EndDate.getDateEditor().getUiComponent()).getText(),
                                jComboBoxLeaveType.getSelectedItem().toString(),
                                jTextFieldTotalDays.getText(),
                                };
        Leave newLeave = new Leave(LeaveData);
        
        String[] requestData = {newLeave.getID(), user.getEmployeeID(), LocalDate.now().toString(), jTextArea1Notes.getText()};      
        Request newRequest = new Request(requestData);
        
        
        try {
            request.addEntityRecord(newRequest);
            leave.addEntityRecord(newLeave);
        } catch (Exception ex) {
            Logger.getLogger(RequestCenter.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        JOptionPane.showMessageDialog(null, "Successfully Requested"); // Confirmation message  
        clearLeaveFields();
//        // 1. Get the start date and end date 
//        Date startDate = jDateChooser1StartDate.getDate();
//        Date endDate = jDateChooser2EndDate.getDate();
//
//        // 2. Check if both start date and end date are selected
//        if ((startDate == null || endDate == null) || ((endDate.before(startDate) || endDate.equals(startDate))) ) {
//            jLabel1ValidationForLeave.setText("Invalid entry");
//            return; 
//        }
//
//        // 3. Retrieve leave type and notes 
//        String leaveType = (String) jComboBoxLeaveType.getSelectedItem();
//        String notes = jTextArea1Notes.getText(); 
//
//        // 4. Get the current date as requestDate 
//        Date requestDate = new Date();
//
//        // 5. Create the Leave object with all required parameters
//        Leave leaveRequest = null;
//            try {
//                leaveRequest = new Leave(startDate, endDate, leaveType, notes, requestDate);
//            } catch (IOException ex) {
//                Logger.getLogger(RequestCenter.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        // 6. Process the leave request 
//        leaveRequest.processRequest();
//
//        // 7. Clear fields for new submission
//        jDateChooser1StartDate.setDate(null);
//        jDateChooser2EndDate.setDate(null);
//        jComboBoxLeaveType.setSelectedIndex(0); 
//        jTextArea1Notes.setText(""); 
//        jTextFieldTotalDays.setText(""); 
    }//GEN-LAST:event_jButton1SubmitLeaveActionPerformed

    private void jButton4EmployeeRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4EmployeeRequestActionPerformed
        
    }//GEN-LAST:event_jButton4EmployeeRequestActionPerformed

    private void jButton3AttendanceRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3AttendanceRecordActionPerformed
        Access.accessProfilePage(user);
        this.setVisible(false);
    }//GEN-LAST:event_jButton3AttendanceRecordActionPerformed

    private void jButton3TimeClockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3TimeClockActionPerformed
        Access.accessCompanyHomePage((Admin) user); 
        this.setVisible(false);
    }//GEN-LAST:event_jButton3TimeClockActionPerformed

    private void jButton1RequestCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1RequestCenterActionPerformed
        Access.accessEmployeeAttendance(user);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1RequestCenterActionPerformed

    private void jButton4PayslipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4PayslipActionPerformed
        Access.accessEmployeePayslip(user);
        this.setVisible(false);
    }//GEN-LAST:event_jButton4PayslipActionPerformed

    private void jComboBoxAttendancePeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAttendancePeriodActionPerformed
        if (jComboBoxAttendancePeriod.getSelectedIndex() < 0 || jComboBoxAttendancePeriod.getSelectedItem() == null) {
            return;
        }
        jTextField5OvertimeStart.setText("0");
        jTextField4OvertimeEnd.setText("0");
        jTextField1TotalOvertime.setText("0");
        
        String[] dates = jComboBoxAttendancePeriod.getSelectedItem().toString().split(" : ");
        String startDate = dates[0];
        String endDate = dates[1];
        
        PayPeriod selectedPayPeriod = new PayPeriod(startDate, endDate);
        
        jComboBoxOvertimeDate.setEnabled(true);
        jComboBoxOvertimeDate.setModel(dtrManager.getOvertimeDatesComboBoxModel(dtrManager.getFilteredDailyAttendance(new Employee(user.getEmployeeID()), selectedPayPeriod)));
        jComboBoxOvertimeDate.setRenderer(new PromptComboBoxRenderer("Select Overtime Date") );
        jComboBoxOvertimeDate.setSelectedIndex(-1);
    }//GEN-LAST:event_jComboBoxAttendancePeriodActionPerformed

    private void jComboBoxOvertimeDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOvertimeDateActionPerformed
        if (jComboBoxOvertimeDate.getSelectedIndex() < 0 || jComboBoxOvertimeDate.getSelectedItem() == null) {
            return;
        }
        
        DateTimeFormatter formatterDate = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        
        LocalDate selectedDate = LocalDate.parse((String) jComboBoxOvertimeDate.getSelectedItem(), formatterDate);
        
        DailyAttendance userAttendance = dtrManager.getEmployeeDailyAttendance(new Employee(user.getEmployeeID()), selectedDate);
        Overtime userOvertime = new Overtime(userAttendance);
        jTextField5OvertimeStart.setText(userOvertime.getStartTime().toString());
        jTextField4OvertimeEnd.setText(userOvertime.getEndTime().toString());
        jTextField1TotalOvertime.setText(userAttendance.getHoursOvertime().toString());
    }//GEN-LAST:event_jComboBoxOvertimeDateActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//        public static void main(String args[]) {
//        /* Set the Nimbus look and feel
//        Look and feel setting code (optional)*/
//
//        /*Create and display the form*/
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//
//            }
//        });
//    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RequestCenter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RequestCenter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RequestCenter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RequestCenter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RequestCenter().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1Calculate;
    private javax.swing.JButton jButton1CalculateDays;
    private javax.swing.JButton jButton1RequestCenter;
    private javax.swing.JButton jButton1SubmitLeave;
    private javax.swing.JButton jButton1SubmitOvertime;
    private javax.swing.JButton jButton3AttendanceRecord;
    private javax.swing.JButton jButton3TimeClock;
    private javax.swing.JButton jButton4EmployeeRequest;
    private javax.swing.JButton jButton4Payslip;
    private javax.swing.JButton jButton6LogOut;
    private javax.swing.JComboBox<String> jComboBox1AMPM;
    private javax.swing.JComboBox<String> jComboBox2AMPM;
    private javax.swing.JComboBox<String> jComboBoxAttendancePeriod;
    private javax.swing.JComboBox<String> jComboBoxLeaveType;
    private javax.swing.JComboBox<String> jComboBoxOvertimeDate;
    private com.toedter.calendar.JDateChooser jDateChooser1Overtime;
    private com.toedter.calendar.JDateChooser jDateChooser1StartDate;
    private com.toedter.calendar.JDateChooser jDateChooser2EndDate;
    private javax.swing.JLabel jLabel1OvertimeDate;
    private javax.swing.JLabel jLabel1StartDate;
    private javax.swing.JLabel jLabel1ValidationErrors;
    private javax.swing.JLabel jLabel1ValidationForLeave;
    private javax.swing.JLabel jLabel2EndDate;
    private javax.swing.JLabel jLabel3LeaveType;
    private javax.swing.JLabel jLabel4OvertimeStart;
    private javax.swing.JLabel jLabel4TotalDays;
    private javax.swing.JLabel jLabel5Notes;
    private javax.swing.JLabel jLabel5OvertimeEnd;
    private javax.swing.JLabel jLabel6TotalOvertime;
    private javax.swing.JLabel jLabelAttendancePeriod;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3SubmitLeave;
    private javax.swing.JPanel jPanel4SubmitOvertime;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1SubmitOvertime;
    private javax.swing.JTextArea jTextArea1Notes;
    private javax.swing.JTextField jTextField1TotalOvertime;
    private javax.swing.JTextField jTextField4OvertimeEnd;
    private javax.swing.JTextField jTextField5OvertimeStart;
    private javax.swing.JTextField jTextFieldTotalDays;
    // End of variables declaration//GEN-END:variables
    public String validateOvertimeFields(){
        StringBuilder errorMessages = new StringBuilder();
        appendError(errorMessages, ComponentsValidator.validateRequiredJComboBox(jComboBoxAttendancePeriod));
        appendError(errorMessages, ComponentsValidator.validateRequiredJComboBox(jComboBoxOvertimeDate));
        appendError(errorMessages, ComponentsValidator.validateRequiredJTextField(jTextField5OvertimeStart));
        appendError(errorMessages, ComponentsValidator.validateRequiredJTextField(jTextField4OvertimeEnd));
        appendError(errorMessages, ComponentsValidator.validateRequiredJTextField(jTextField1TotalOvertime)); 
        
        return errorMessages.length() > 0 ? errorMessages.toString() : "";
    }
    
    public String validateLeaveFields(){
        StringBuilder errorMessages = new StringBuilder();
        appendError(errorMessages, ComponentsValidator.validateRequiredJDateChooser(jDateChooser1StartDate));
        appendError(errorMessages, ComponentsValidator.validateRequiredJDateChooser(jDateChooser2EndDate));
        appendError(errorMessages, ComponentsValidator.validateRequiredJComboBox(jComboBoxLeaveType));
        appendError(errorMessages, ComponentsValidator.validateRequiredJTextField(jTextFieldTotalDays));
        
        return errorMessages.length() > 0 ? errorMessages.toString() : "";
    }
    
    // Helper method to append error messages only if they exist
    private void appendError(StringBuilder errors, String errorMessage) {
        if (!errorMessage.isEmpty()) {
            errors.append(errorMessage).append("\n");
        }
    }
    
    public void clearOvertimeFields(){
        jComboBoxAttendancePeriod.setSelectedIndex(-1);
        jComboBoxOvertimeDate.setEnabled(false);
        jTextField5OvertimeStart.setText("0");
        jTextField4OvertimeEnd.setText("0");
        jTextField1TotalOvertime.setText("0");
    }
    
    public void clearLeaveFields(){
        jDateChooser1StartDate.setDate(null);
        jDateChooser2EndDate.setDate(null);
        jComboBoxLeaveType.setSelectedIndex(-1);
        jTextFieldTotalDays.setText("0");
        jTextArea1Notes.setText("");
    }
}
